# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/4 Models/00_utilities.ipynb.

# %% auto 0
__all__ = ['visualize_pgssm', 'to_log_probs', 'to_consecutive_logits', 'from_consecutive_logits']

# %% ../../nbs/4 Models/00_utilities.ipynb 2
# libraries
import matplotlib.pyplot as plt
from isssm.typing import PGSSM
from matplotlib.colors import Normalize
import matplotlib.cm as cm
import jax.numpy as jnp
from jaxtyping import Float, Array
import fastcore.test as fct

# %% ../../nbs/4 Models/00_utilities.ipynb 4
def __zero_to_nan(arr, eps=1e-10):
    return jnp.where(jnp.abs(arr) < eps, jnp.nan, arr)


def visualize_pgssm(pgssm: PGSSM):
    fig, axes = plt.subplots(nrows=1, ncols=3)
    cmap = cm.get_cmap("viridis")

    A, B, D, Sigma = pgssm.A[0], pgssm.B[0], pgssm.D[0], pgssm.Sigma[0]
    max = jnp.max(jnp.array([A.max(), B.max(), D.max()]))
    min = jnp.min(jnp.array([A.min(), B.min(), D.min()]))

    normalizer = Normalize(min, max)
    im = cm.ScalarMappable(norm=normalizer)
    axes[0].imshow(__zero_to_nan(A), cmap=cmap, norm=normalizer)
    axes[0].set_title("A")
    axes[1].imshow(__zero_to_nan(B), cmap=cmap, norm=normalizer)
    axes[1].set_title("B")
    axes[2].imshow(__zero_to_nan(D), cmap=cmap, norm=normalizer)
    axes[2].set_title("D")

    fig.colorbar(im, ax=axes.ravel().tolist())
    plt.show()

    plt.imshow(__zero_to_nan(Sigma))
    plt.colorbar()
    plt.show()

# %% ../../nbs/4 Models/00_utilities.ipynb 7
def to_log_probs(log_ratios: Float[Array, "k-1"]) -> Float[Array, "k"]:
    exp_q = jnp.exp(log_ratios)
    p_n_delay = 1 / (1 + exp_q.sum(axis=-1, keepdims=True))
    log_p = jnp.log(jnp.concatenate([exp_q * p_n_delay, p_n_delay], axis=-1))
    return log_p

# %% ../../nbs/4 Models/00_utilities.ipynb 10
import jax.scipy as jsp


def to_consecutive_logits(probs: Float[Array, "k"]) -> Float[Array, "k-1"]:
    cum_probs = jnp.cumsum(probs[..., ::-1], axis=-1)[..., ::-1]
    return jsp.special.logit(probs[:-1] / cum_probs[:-1])


def from_consecutive_logits(
    consecutive_logits: Float[Array, "k-1"]
) -> Float[Array, "k"]:
    q = jsp.special.expit(consecutive_logits)
    q_ext = jnp.concatenate(
        (jnp.zeros_like(q[..., :1]), q, jnp.ones_like(q[..., :1])), axis=-1
    )

    p = q_ext[..., 1:] * jnp.cumprod(1 - q_ext[..., :-1], axis=-1)
    return p
